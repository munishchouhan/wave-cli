name: Wave-cli builds
on:
  push:
    branches:
      - '*'
      - '!refs/tags/.*'
    tags-ignore:
      - '*'
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - '*'
      - '!refs/tags/.*'
    tags-ignore:
      - '*'
jobs:
  build:
    name: Wave on ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            fatjar: true
            musl: true
          - os: macos-latest
            codesign: true

    steps:
      - name: Environment
        run: env | sort

      - uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        if: ${{ matrix.musl }}
        with:
          java-version: '21'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          native-image-musl: 'true'

      - uses: graalvm/setup-graalvm@v1
        if: ${{ !matrix.musl }}
        with:
          java-version: '21'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Run tests
        run: |
          ./gradlew test

      - name: Build fat JAR
        if: ${{ matrix.fatjar }}
        run: ./gradlew shadowJar

      - name: Upload fat JAR artifact
        if: ${{ matrix.fatjar }}
        uses: actions/upload-artifact@v4
        with:
          name: wave_jar
          path: ./app/build/libs/wave.jar

      - name: Build static native
        if: ${{ matrix.musl }}
        run: ./gradlew app:nativeCompile
        env:
          PLATFORM: linux-x86_64

      - name: Build native
        if: ${{ !matrix.musl }}
        run: ./gradlew app:nativeCompile

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: nativeCompile-${{ matrix.os }}
          path: ./app/build/native/nativeCompile

      - name: Publish tests report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-jdk-${{ matrix.java_version }}
          path: |
            **/build/reports/tests/test
  release:
    name: Release
    if: "contains(github.event.head_commit.message, '[release]') && github.event.ref=='refs/heads/master'"
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v2

      - name: Setup Java for JReleaser
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Version
        id: version
        run: |
          VERSION=$(cat ./VERSION)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
          JRELEASER_PROJECT_VERSION: ${{ steps.version.outputs.VERSION }}

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
...
